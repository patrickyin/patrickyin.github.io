<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Patrick Yin&#39;s Blog</title>
  
  <subtitle>Patrick Yin&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eetech.github.io/"/>
  <updated>2018-04-01T09:26:00.000Z</updated>
  <id>http://eetech.github.io/</id>
  
  <author>
    <name>Patrick Yin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Realm DB 3, RxJava2, Android, Thread. The important things you need to know</title>
    <link href="http://eetech.github.io/2017/10/Realm-DB-3-RxJava2-Android-Thread-The-important-things-you-need-to-know/"/>
    <id>http://eetech.github.io/2017/10/Realm-DB-3-RxJava2-Android-Thread-The-important-things-you-need-to-know/</id>
    <published>2017-10-17T08:23:16.000Z</published>
    <updated>2018-04-01T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you use Realm DB in your project, the multiple threading issues would make<br>you a headache.</p><p>The official documentation shows:</p><blockquote><p>The only limitation is that you cannot randomly pass Realm objects between<br>threads.<strong> If you need the same data on another thread, you need to query for<br>that data on the that other thread.</strong> Furthermore, you can observe the changes<br>using Realms reactive architecture. Remember, all objects are kept up to date<br>between threads — Realm will notify you when the data changes.</p></blockquote><p><img src="https://cdn-images-1.medium.com/max/600/1*9Lwgxzh3k5e4H5K3LSLSVw.png" alt=""></p><p>Most time, you would like to fetch a whole bunch items from Realm DB and then<br>show them on the UI, so if you try to do these operations on <code>Main Thread</code>, it<br>would work well. But……. You shouldn’t do IO operations on <code>Main Thread</code>. It<br>would freeze your app’s UI for a while if you do some large IO transactions on<br><code>Main Thread</code>. What would you do?</p><p><strong>Use Realms notifications?</strong></p><blockquote><p>All of the code snippets are written with Kotlin.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> realmListener = <span class="keyword">object</span> : RealmChangeListener &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">onChange</span><span class="params">(realm: <span class="type">Realm</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ... do something with the updates (UI, etc.) ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">realm.addChangeListener(realmListener)</span><br></pre></td></tr></table></figure><p>This is not a good idea, you don’t want to add these callback code snippets into<br>your app because you build your app with RxJava 2.</p><p><strong>Use Realms reactive architecture?</strong></p><p>Even though Realm can provide observable or flowable, it is still hard to manage<br>the thread if you mix some your own Rx operators and try to invoke<br><code>subscribeOn()</code> to change the thread, your Realm instance and Realm results<br>instance’s working thread won’t be your expectation, the results instance would<br>be on a separate thread and you couldn’t control it, you may get <code>Realm objectscan only be accessed on the thread they were created.</code> from time to time if you<br>try to invoke <code>map()</code> or some other operators after it.</p><p><strong>Create your own RxJava2 repository observable, and mix your current Rx<br>operators?</strong></p><p><strong>I would say, Yes!</strong></p><p>You might have your own repository observable before you decide to implement<br>Realm DB as your local storage DB, etc:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">articleObservable.filter &#123; article -&gt; article.title != <span class="literal">null</span>&#125;</span><br><span class="line">    .flatMap &#123; article -&gt; article.comments&#125;</span><br><span class="line">    .map &#123; comment -&gt; comment.createdDate&#125;</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(observer)</span><br></pre></td></tr></table></figure><p><strong>Now we should replace the normal </strong><code>articleObservable</code><strong> with a Realm version</strong><code>articleObservable</code><strong>:</strong></p><p>How do you create an <code>Observable</code>? The simplest way is using<br><code>Observable.from()</code>. Let’s do it:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> articleRealmObservable = Observable.from(</span><br><span class="line">   Realm.getDefaultInstance().where(Article::<span class="class"><span class="keyword">class</span>).<span class="title">findAll</span></span>()</span><br><span class="line">)</span><br><span class="line">articleRealmObservable.filter &#123; article -&gt; article.title != <span class="literal">null</span>&#125;</span><br><span class="line">    .flatMap &#123; article -&gt; article.comments&#125;</span><br><span class="line">    .map &#123; comment -&gt; comment.createdDate&#125;</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(observer)</span><br></pre></td></tr></table></figure><p>Run it…</p><p><strong>Oh NO!</strong><br> there is something wrong:<br> <code>Realm objects can only be accessedon the thread they were created.</code> cause on the <code>filter()</code> line.</p><p>What causes this error? <br> We pass Realm operations as a parameter to<br><code>Observable.from()</code>, its working thread still couldn’t be changed to the IO<br>thread even though we invoked <code>.subscribeOn(Scheduler.io()</code>. That means<br><code>Realm.getDefaultInstance().where(Article::class).findAll()</code> works on the thread<br>which you write the code on(in the example, it is on <code>Main Thread</code>). and all of<br>other Rx Operators(e.g. <code>filter()</code>, <code>map()</code>, etc.) work on <code>IO Thread</code>, and<br>realm object cannot be passed between threads.</p><p><strong>The correct way is</strong> to create an <code>Observable</code> manually, put the Realm<br>operation statement into the <code>ObservableEmitter</code>. After that, the<br><code>subscribeOn()</code> will affect the Realm object’s working thread.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> articleRealmObservable = Observable.create &#123; emitter -&gt;</span><br><span class="line">    <span class="keyword">val</span> realm = Realm.getDefaultInstance()</span><br><span class="line">    <span class="keyword">val</span> articles = realm.where(Article::<span class="class"><span class="keyword">class</span>).<span class="title">findAll</span></span>()</span><br><span class="line">    <span class="keyword">if</span> (articles.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        articles.forEach &#123; emitter.onNext(it) &#125;</span><br><span class="line">        emitter.onComplete()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        emitter.onError(IndexOutOfBoundsException())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">articleRealmObservable.filter &#123; article -&gt; article.title != <span class="literal">null</span>&#125;</span><br><span class="line">    .flatMap &#123; article -&gt; article.comments&#125;</span><br><span class="line">    .map &#123; comment -&gt; comment.createdDate&#125;</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(observer)</span><br></pre></td></tr></table></figure><p>🎉🎉🎉🎉🎉🎉🎉🎉</p><p>Follow me at <a href="https://medium.com/@pyin001" target="_blank" rel="noopener">medium</a> if you like this post ;-)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you use Realm DB in your project, the multiple threading issues would make&lt;br&gt;you a headache.&lt;/p&gt;
&lt;p&gt;The official documentation shows:
      
    
    </summary>
    
    
      <category term="Android" scheme="http://eetech.github.io/tags/Android/"/>
    
      <category term="RxJava" scheme="http://eetech.github.io/tags/RxJava/"/>
    
      <category term="Realm" scheme="http://eetech.github.io/tags/Realm/"/>
    
      <category term="Multithreading" scheme="http://eetech.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>The issues of mocking Realm in Java/Kotlin unit test</title>
    <link href="http://eetech.github.io/2017/10/The-issues-of-mocking-Realm-in-Java-Kotlin-unit-test/"/>
    <id>http://eetech.github.io/2017/10/The-issues-of-mocking-Realm-in-Java-Kotlin-unit-test/</id>
    <published>2017-10-10T08:18:23.000Z</published>
    <updated>2018-04-01T09:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I use Realm in all of my Android projects heavily, and there was no issue when I<br>wrote mocking Realm instance in unit test before. Recently, it took me a lot of<br>time to write the unit test because there are some issues in the unit test when<br>I use Mockito, PowerMock and Realm together.</p></blockquote><h4 id="Which-dependencies-do-I-use-in-my-unit-test-in-the-Android-project"><a href="#Which-dependencies-do-I-use-in-my-unit-test-in-the-Android-project" class="headerlink" title="Which dependencies do I use in my unit test in the Android project?"></a>Which dependencies do I use in my unit test in the Android project?</h4><ul><li>Realm 3.7.2</li><li>GSON 2.8.1</li><li>RxJava 2.1.3</li><li>Mockito 2.10.0</li><li>PowerMock 1.7.3</li></ul><h4 id="There-are-3-issues-I-met-when-I-was-writing-the-unit-test-and-also-I’ll-provide"><a href="#There-are-3-issues-I-met-when-I-was-writing-the-unit-test-and-also-I’ll-provide" class="headerlink" title="There are 3 issues I met when I was writing the unit test, and also I’ll provide"></a>There are 3 issues I met when I was writing the unit test, and also I’ll provide</h4><p>the simplest solution for you:</p><h3 id="Issue-1"><a href="#Issue-1" class="headerlink" title="Issue 1"></a>Issue 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Failed to transform class with name io.realm.Realm. Reason: rx.Observable</span><br><span class="line"></span><br><span class="line">Caused by: javassist.NotFoundException: rx.Observable</span><br></pre></td></tr></table></figure><p><strong>Background: </strong>Use GSON and Realm together, and also share the same Model class<br>for those.</p><p><strong>Why?</strong> <br> Because GSON uses reflection to perform the data binding. This<br>conflicts with Realm’s support for RxJava 1, as RxJava might not be available to<br>the class loader when you use RxJava2. If you use RxJava 1, you wouldn’t see<br>this error.</p><p><strong>Solution: </strong>Create an empty dummy file that looks like the following:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do not add anything, leave blank here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Important: </strong><br> This file should be in the root folder of your unit<br>test<code>src</code> folder, e.g. <code>./src/test/java/rx/Observable.java</code></p></blockquote><h3 id="Issue-2"><a href="#Issue-2" class="headerlink" title="Issue 2"></a>Issue 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Invoking the beforeTestMethod method on PowerMock test listener org.powermock.api.extension.listener.AnnotationEnabler@3e681bc failed</span><br></pre></td></tr></table></figure><p><strong>Background: </strong>Use PowerMock to mock Realm static methods and realm instance.</p><p><strong>Why?</strong> <br> This is a bug in PowerMock when using Mockito 2, PowerMock, Realm<br>together.</p><p><strong>Solution: </strong>Downgrade PowerMock version to <code>1.7.0RC4</code>.</p><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// build.gradle</span><br><span class="line"></span><br><span class="line">testImplementation &quot;org.powermock:powermock-module-junit4:1.7.0RC4&quot;</span><br><span class="line">testImplementation &quot;org.powermock:powermock-api-mockito2:1.7.0RC4&quot;</span><br></pre></td></tr></table></figure><h3 id="Issue-3"><a href="#Issue-3" class="headerlink" title="Issue 3"></a>Issue 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: org.mockito.internal.handler.MockHandlerFactory.createMockHandler(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;</span><br></pre></td></tr></table></figure><p><strong>Background: </strong>After downgrade PowerMock, you may get lots of<br><code>NoSuchMethodError</code> around your unit tests.</p><p><strong>Why?</strong> <br> When you downgrade PowerMock, you have to downgrade Mockito as<br>well, each PowerMock only can work well with some particular Mockito versions.</p><p><strong>Solution: </strong>Downgrade Mockito version to <code>2.8.47</code>.</p><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// build.gradle</span><br><span class="line"></span><br><span class="line">testImplementation &quot;org.mockito:mockito-core:2.8.47&quot;</span><br></pre></td></tr></table></figure><p>All done, enjoy to use Mockito, PowerMock and Realm together in unit test!!!</p><p>🍾 🍾 🍾 🍾 🍾 🍾 🍾 🍾 🍾 🍾 🍾</p><p>Follow me at <a href="https://medium.com/@pyin001" target="_blank" rel="noopener">medium</a> if you like this post ;-)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;I use Realm in all of my Android projects heavily, and there was no issue when I&lt;br&gt;wrote mocking Realm instance in unit tes
      
    
    </summary>
    
    
      <category term="Android" scheme="http://eetech.github.io/tags/Android/"/>
    
      <category term="Realm" scheme="http://eetech.github.io/tags/Realm/"/>
    
      <category term="Unittest" scheme="http://eetech.github.io/tags/Unittest/"/>
    
      <category term="Mockito" scheme="http://eetech.github.io/tags/Mockito/"/>
    
      <category term="Powermock" scheme="http://eetech.github.io/tags/Powermock/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Charles as SSL proxy for Android 8 Emulator (AVD) — Network security config in your App</title>
    <link href="http://eetech.github.io/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8-Emulator-AVD-%E2%80%94-Network-security-config-in-your-App/"/>
    <id>http://eetech.github.io/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8-Emulator-AVD-—-Network-security-config-in-your-App/</id>
    <published>2017-08-31T09:12:11.000Z</published>
    <updated>2018-04-01T09:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This is the second part in a two-part series. You should read the</em><a href="/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8-Emulator-AVD/"> first part<br>first</a><em>.</em></p><p>If you follow the last part of this story, I’m sure you can use Chrome to access<br>HTTPS websites with Charles proxy, but if you try to intercept the connections<br>between your own app and https services and your device or emulator’s Android<br>version ≥ 7.0 (API 24), you may get an SSL handshake error, you still couldn’t<br>use Charles to debug your app.</p><p>Google changed how Android handles trusted certificate authorities (CAs) to<br>provide safer defaults for secure app traffic. see details:<br><a href="https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html</a></p><p>So here is a way we can override the network security config on <code>Debug</code> build<br>type to make the system trust user added CAs:</p><h4 id="Add-property-to-AndroidManifest-xml"><a href="#Add-property-to-AndroidManifest-xml" class="headerlink" title="Add property to AndroidManifest.xml"></a>Add property to <code>AndroidManifest.xml</code></h4><p>Add <code>android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</code> and<br><code>tools:targetApi=&quot;n&quot;</code> into <code>&lt;application</code> node of your <code>AndroidManifest.xml</code><br>file. e.g.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:networkSecurityConfig</span>=<span class="string">"@xml/network_security_config"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:targetApi</span>=<span class="string">"n"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".dashboard.DashboardActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Create-an-xml-file"><a href="#Create-an-xml-file" class="headerlink" title="Create an xml file"></a>Create an xml file</h4><p>We have defined the <code>android:networkSecurityConfig</code>, and then we would to create<br>an XML file which has the same name as the value we defined before in<br><code>AndroidManifest.xml</code></p><blockquote><p>/res/xml/network_security_config.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xml version="1.0" encoding="utf-8"</span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Trust system added CAs while debuggable only --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"system"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Run your app, check your Charles, all the HTTPS traffics would be shown in.<br>🍺🍺🍺🍺</strong></p><p>Follow me at <a href="https://medium.com/@pyin001" target="_blank" rel="noopener">medium</a> if you like this post ;-)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;This is the second part in a two-part series. You should read the&lt;/em&gt;&lt;a href=&quot;/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8
      
    
    </summary>
    
    
      <category term="Android" scheme="http://eetech.github.io/tags/Android/"/>
    
      <category term="Avd" scheme="http://eetech.github.io/tags/Avd/"/>
    
      <category term="Emulator" scheme="http://eetech.github.io/tags/Emulator/"/>
    
      <category term="Charles" scheme="http://eetech.github.io/tags/Charles/"/>
    
      <category term="SSL" scheme="http://eetech.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Charles as SSL proxy for Android 8 Emulator (AVD)</title>
    <link href="http://eetech.github.io/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8-Emulator-AVD/"/>
    <id>http://eetech.github.io/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8-Emulator-AVD/</id>
    <published>2017-08-01T09:05:23.000Z</published>
    <updated>2018-04-01T09:15:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you are an iOS developer, I’m pretty sure that you know how to set up Charles<br>as SSL proxy for iOS simulator. But if you use AVD or physical Android device,<br>it is a bit complicated because Charles doesn’t have 1-click SSL certificate<br>installing feature for Android devices. So we have to set the certificate up<br>manually, let’s do it:</p><h4 id="Setting-up-the-computer-which-runs-Charles"><a href="#Setting-up-the-computer-which-runs-Charles" class="headerlink" title="Setting up the computer which runs Charles"></a>Setting up the computer which runs Charles</h4><ul><li>Enable HTTP Transparent proxying and set the port number</li></ul><p><em>Menu -&gt; Proxy -&gt; Proxy Settings</em></p><p><img src="https://cdn-images-1.medium.com/max/800/1*DdI_cgxzRkVGC5NRyp990w.png" alt=""></p><ul><li>Set the SSL proxying locations</li></ul><p><em>Menu -&gt; Proxy -&gt; SSL Proxying Settings</em></p><p>Check the <code>Enable SSL Proxying</code>, and then click <code>add</code> button to add a new<br>location.</p><p>If you’d like to intercept all of the SSL connections, just set <code>*</code> for <code>Host</code><br>and <code>Port</code>.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*MDtSrgbfV-KsiTpwlQv-Gg.png" alt=""></p><ul><li>Set up the white list</li></ul><p><em>Menu -&gt; Tools -&gt; White List</em></p><p>Click <code>Add</code> to add a new location. Select the <code>https</code> as the Protocol, and leave<br>other fields as blank, then it will allow all https connections</p><p><img src="https://cdn-images-1.medium.com/max/800/1*kpXGVr5UCaKTgZ02r5CAEQ.png" alt=""></p><h4 id="Setting-up-the-Android-Emulator-AVD"><a href="#Setting-up-the-Android-Emulator-AVD" class="headerlink" title="Setting up the Android Emulator (AVD)."></a>Setting up the Android Emulator (AVD).</h4><ul><li>Setting up the proxy ip and port for AVD</li></ul><blockquote><p>Do not use <code>localhost</code> as the proxy ip setting, if you set localhost for AVD,<br>the AVD would regard it as itself, not the computer which runs the Charles, so<br>need to use the real ip address of your computer all the time.</p></blockquote><p>Start an AVD instance -&gt; click <code>...</code> button on the right side of the AVD screen.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*u-WflwnCkeljgz00KxJNxg.png" alt=""></p><p>Go to <code>Settings</code> tab, and then click <code>Proxy</code> tab on the top of the window, then<br>set your computer’s IP address and Charles’ port.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*j0_JwMiExxOM-8yylYcKlg.png" alt=""></p><ul><li>Install Charles SSL Certificate</li></ul><p>open the URL <code>http://chls.pro/ssl</code> with Chrome in AVD, then the browser will<br>download the certificate, after that you can assign a name for the new<br>certificate.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*8axaWWFpxhyYCRtB8ecsXg.png" alt=""></p><blockquote><p>The system may ask you to setup a PIN at this stage.</p></blockquote><p>Done!</p><p>Try to access google(<a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a>) to see if it works correctly.</p><h3 id="Important"><a href="#Important" class="headerlink" title="Important"></a>Important</h3><p>If you prefer to use Charles debug your own app on the Android which is ≥<br>Android 7.0 (API level 24), please read the <a href="/2017/08/Setting-up-Charles-as-SSL-proxy-for-Android-8-Emulator-AVD-%E2%80%94-Network-security-config-in-your-App/">2nd<br>part</a></p><p>Follow me at <a href="https://medium.com/@pyin001" target="_blank" rel="noopener">medium</a> if you like this post ;-)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are an iOS developer, I’m pretty sure that you know how to set up Charles&lt;br&gt;as SSL proxy for iOS simulator. But if you use AVD or
      
    
    </summary>
    
    
      <category term="Android" scheme="http://eetech.github.io/tags/Android/"/>
    
      <category term="Avd" scheme="http://eetech.github.io/tags/Avd/"/>
    
      <category term="Emulator" scheme="http://eetech.github.io/tags/Emulator/"/>
    
      <category term="Charles" scheme="http://eetech.github.io/tags/Charles/"/>
    
      <category term="SSL" scheme="http://eetech.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Convert MBTiles map or Open Street Map to OSMDroid Offline SQLite map format</title>
    <link href="http://eetech.github.io/2017/02/Convert-MBTiles-map-to-OSMDroid-Offline-SQLite-map-format/"/>
    <id>http://eetech.github.io/2017/02/Convert-MBTiles-map-to-OSMDroid-Offline-SQLite-map-format/</id>
    <published>2017-02-10T08:01:53.000Z</published>
    <updated>2018-04-01T05:24:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Step-by-step-guide"><a href="#Step-by-step-guide" class="headerlink" title="Step-by-step guide"></a>Step-by-step guide</h3><p>You can convert MBTiles map and Open Street Map to OSMDroid Offline SQLite map format. For the first step, if you want to convert from MBTiles file, you should convert it to Open Street Map local format with MBUtil first.</p><ul><li><p>(Optional) Convert MBTiles file(filename.mbtiles) to standard Open Street Map format with <a href="https://github.com/mapbox/mbutil" target="_blank">MBUtil</a>.<br><strong>Important: Once you convert MBtiles file to OSM format, you will lose all of the UTFGrid data and metadata(e.g. boundaries, min zoom level, max zoom level, etc.) inside of the MBTiles file.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python installation(requires easy_install)</span></span><br><span class="line"></span><br><span class="line">$ easy_install mbutil</span><br><span class="line">$ mb-util -h</span><br><span class="line">Usage: mb-util [options] input output</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  Export an mbtiles file to a directory of files:</span><br><span class="line">  $ mb-util world.mbtiles tiles <span class="comment"># tiles must not already exist</span></span><br><span class="line"></span><br><span class="line">  Import a directory of tiles into an mbtiles file:</span><br><span class="line">  $ mb-util tiles world.mbtiles <span class="comment"># mbtiles file must not already exist</span></span><br></pre></td></tr></table></figure><p>Now you can see the usage of the MBUtil.</p><p>After you perform “mb-util world.mbtiles tiles”, you will get a standard Open Street Map folder called “tiles”, and the folder structure will be “tiles/{zoom}/{x}/{y}.png”. zoom means zoom level of the specified tile, and x y mean the tile position of the whole map, not coordinate. If you don’t know what is tile position and zoom level, please see the definition of the tile position below:</p><img src="/2017/02/Convert-MBTiles-map-to-OSMDroid-Offline-SQLite-map-format/tile_x_y.png" title="The definition of the tile X and Y"><p>And also you can refer to:<br><a href="https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames" target="_blank">Slippy map tilenames</a><br><a href="http://wiki.openstreetmap.org/wiki/OpenLayers_Local_Tiles_Example" target="_blank">OpenLayers Local Tiles Example</a></p></li><li><p>Convert OSM folder or the OSM data on the server to OSMDroid SQLite Map file, you will do it with OSMMapTilePackager, but OSMDroid doesn’t provide the binary file of OSMMapTilePackager, so you would compile it from the source code or download the binary file I compiled before: <a href="/2017/02/Convert-MBTiles-map-to-OSMDroid-Offline-SQLite-map-format/OSMMapTilePackager-5.6.4-SNAPSHOT.zip" title="OSMMapTilePackager-5.6.4-SNAPSHOT.zip">OSMMapTilePackager-5.6.4-SNAPSHOT.zip</a> , please install JRE first.</p><p>Perform the command below, we will see the GUI of the OSMMapTilePackager, and we need to fill out boundaries, minimum zoom level and maximum zoom level, and Temp-Folder(<strong>tile source name, this is very important, you will use it when you load this map file in Android code</strong>).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./OSMMapTilePackager -gui</span><br></pre></td></tr></table></figure><img src="/2017/02/Convert-MBTiles-map-to-OSMDroid-Offline-SQLite-map-format/osmmaptilePackager_gui_snapshot.png" title="OSMMapTilePackager GUI"><p>this tool supports command line as well.</p><p>Tips: The extension name of the destination file must be “.sqlite”.</p><p><strong>Congratulation! Now you can enjoy using your OSMDroid SQLite map file without any internet connections on Android.</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Step-by-step-guide&quot;&gt;&lt;a href=&quot;#Step-by-step-guide&quot; class=&quot;headerlink&quot; title=&quot;Step-by-step guide&quot;&gt;&lt;/a&gt;Step-by-step guide&lt;/h3&gt;&lt;p&gt;You ca
      
    
    </summary>
    
      <category term="Android" scheme="http://eetech.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://eetech.github.io/tags/Android/"/>
    
      <category term="OSMDroid" scheme="http://eetech.github.io/tags/OSMDroid/"/>
    
      <category term="MBTiles" scheme="http://eetech.github.io/tags/MBTiles/"/>
    
      <category term="map" scheme="http://eetech.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>UTFGrid and MBTiles map file decoding on Android</title>
    <link href="http://eetech.github.io/2017/01/UTFGrid-and-MBTiles-map-file-decoding-on-Android/"/>
    <id>http://eetech.github.io/2017/01/UTFGrid-and-MBTiles-map-file-decoding-on-Android/</id>
    <published>2017-01-26T04:54:43.000Z</published>
    <updated>2018-04-01T05:24:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>The following section discusses the problems, with regard to UTFGrid data inside of MBTiles file and solution.</p><h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><p>We need to get the data of the grids for showing the popup window info and drawing the popup window on MapView when user tap a clickable grid, but MapBox Android Library doesn’t provide any functions for getting grid data from MBTile File(they provide the functions in their iOS and JavaScript SDK).</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>(Not-Completed, change to use OSMDroid SDK with OSMDroid SQLite map and GeoJSON format, please refer to OSMDroid)</p><p>We should find out the data and decode it from MBTiles file directly(without MapBox Android library) by ourselves.</p><h4 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h4><ol><li><p>Open the MBTiles file with SQLiteDatabase Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = SQLiteDatabase.openDatabase(<span class="keyword">this</span>.fileName, <span class="keyword">null</span>, SQLiteDatabase.OPEN_READONLY);</span><br></pre></td></tr></table></figure></li><li><p>Calculate the tile_row, tile_column, zoom_level with the coordinate which user tap. we can get the coordinate from MapView with mapView.getZoomLevel(), mapView.getLatitude(), mapView.getLongitude() (These methods are MapView built-in methods), and then use the specific algorithm to calculate it. And also you can find the formula below:</p><img src="/2017/01/UTFGrid-and-MBTiles-map-file-decoding-on-Android/450px-Latlon_to_tile.png" title="Formula for the conversion of the latitude, longitude to tile_x, tile_y"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TilePosition <span class="title">getTilePosition</span><span class="params">(<span class="keyword">float</span> zoomLevel, <span class="keyword">double</span> latitude, <span class="keyword">double</span> longitude)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tileZoom = round(zoomLevel);</span><br><span class="line">    <span class="keyword">int</span> tileX = (<span class="keyword">int</span>) ((longitude + <span class="number">180.0</span>) / <span class="number">360.0</span> * pow(<span class="number">2.0</span>, tileZoom));</span><br><span class="line">    <span class="keyword">int</span> tileY = (<span class="keyword">int</span>)((<span class="number">1.0</span> - log(tan(latitude * PI / <span class="number">180.0</span>) + <span class="number">1.0</span> / cos(latitude * PI / <span class="number">180.0</span>)) / PI) / <span class="number">2.0</span> * pow(<span class="number">2.0</span>, tileZoom));</span><br><span class="line">    tileY = (<span class="keyword">int</span>) (pow(<span class="number">2.0</span>, tileZoom) - tileY - <span class="number">1.0</span>); <span class="comment">// flip Y, this is only for mbtiles file</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TilePosition(tileZoom, tileX, tileY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Here is the structure of the TilePosition:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by patrickyin on 23/1/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TilePosition</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> zoom;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TilePosition</span><span class="params">(<span class="keyword">int</span> zoom, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zoom = zoom;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        TilePosition that = (TilePosition) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (zoom != that.zoom) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (x != that.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> y == that.y;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = zoom;</span><br><span class="line">        result = <span class="number">31</span> * result + x;</span><br><span class="line">        result = <span class="number">31</span> * result + y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Use tile_row, tile_column, zoom_level to get BLOB data of UTFGrid field(field’s name is ‘grid’ in the view ‘grids’ in MBTiles file)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] getGridBLOBData(TilePosition tilePosition) &#123;</span><br><span class="line">    String[] columns = &#123; <span class="string">"grid"</span> &#125;;</span><br><span class="line">    String[] args = &#123; Integer.toString(tilePosition.getZoom()), Integer.toString(tilePosition.getX()), Integer.toString(tilePosition.getY()) &#125;;</span><br><span class="line">    Cursor cursor = <span class="keyword">this</span>.db.query(<span class="string">"grids"</span>, columns, <span class="string">"zoom_level=? AND tile_column=? AND tile_row=?"</span>, args, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (cursor == <span class="keyword">null</span> || cursor.getCount() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    cursor.moveToFirst();</span><br><span class="line">    <span class="keyword">byte</span>[] data = cursor.getBlob(<span class="number">0</span>);</span><br><span class="line">    cursor.close();</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Once we get BLOB data, we should decompress the data with Zlib library, because the BLOB data is gzipped bytecode.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] decompress(<span class="keyword">byte</span>[] compressedData)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(compressedData == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Inflater inflater = <span class="keyword">new</span> Inflater();</span><br><span class="line">    inflater.setInput(compressedData);</span><br><span class="line">    ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream(compressedData.length);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> (!inflater.finished()) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count = inflater.inflate(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataFormatException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] output = outputStream.toByteArray();</span><br><span class="line">    inflater.end();</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Convert BLOB data to JSON object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSONObject utfGridJSON = <span class="keyword">new</span> JSONObject(<span class="keyword">new</span> String(utfGrid));</span><br><span class="line">JSONArray grid = utfGridJSON.getJSONArray(<span class="string">"grid"</span>);</span><br><span class="line">JSONArray keys = utfGridJSON.getJSONArray(<span class="string">"keys"</span>);</span><br></pre></td></tr></table></figure></li><li><p>Calculate X and Y(starting from top left at 0 on the specified tile) from global coordinate for the click point.</p></li></ol><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p><a href="http://wiki.openstreetmap.org/wiki/MBTiles" target="_blank">MbTiles definition</a><br><a href="https://github.com/mapbox/mbtiles-spec" target="_blank">MbTiles specification</a><br><a href="https://www.mapbox.com/blog/how-interactivity-works-utfgrid/" target="_blank">How Interactivity Works with UTFGrid</a><br><a href="https://github.com/mapbox/utfgrid-spec" target="_blank">Specification for UTFGrid</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The following section discusses the problems, with regard to UTFGrid data inside of MBTiles file and solution.&lt;/p&gt;
&lt;h4 id=&quot;Problem&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Android" scheme="http://eetech.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://eetech.github.io/tags/Android/"/>
    
      <category term="MBTiles" scheme="http://eetech.github.io/tags/MBTiles/"/>
    
      <category term="map" scheme="http://eetech.github.io/tags/map/"/>
    
      <category term="UTFGrid" scheme="http://eetech.github.io/tags/UTFGrid/"/>
    
  </entry>
  
</feed>
